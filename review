tests/ltp-sda/2.ipn.ltp/test.text:		if (def->type != 0 && def->offer != NULL)
tests/ltp-sda/2.ipn.ltp/test.text:			blk.type = def->type;
tests/ltp-sda/2.ipn.ltp/test.text:			if (def->offer(&blk, &bundle) < 0)
ltp/library/libltpP.c:		if (def && def->outboundOnHeaderExtensionSerialization)
ltp/library/libltpP.c:			if (def->outboundOnHeaderExtensionSerialization
ltp/library/libltpP.c:		if (def && def->outboundOnTrailerExtensionSerialization)
ltp/library/libltpP.c:			if (def->outboundOnTrailerExtensionSerialization
ltp/library/ltpei.c:		if (def->tag == tag)
ltp/library/ltpei.c:		if (def->inboundBeforeContentProcessing != NULL)
ltp/library/ltpei.c:			result = def->inboundBeforeContentProcessing(segment,
ltp/library/ltpei.c:		if (def->outboundOnHeaderExtensionGeneration != NULL)
ltp/library/ltpei.c:			if (def->outboundOnHeaderExtensionGeneration(segment)
ltp/library/ltpei.c:		if (def->outboundOnTrailerExtensionGeneration != NULL)
ltp/library/ltpei.c:			if (def->outboundOnTrailerExtensionGeneration(segment)
Binary file bp/library/.bei.c.swp matches
bp/library/bei.c:		if (def->type == type)
bp/library/bei.c:			if (def && def->copy)
bp/library/bei.c:				if (def->copy(&newBlk, oldBlk) < 0)
bp/library/bei.c:	if (def && def->release)
bp/library/bei.c:		def->release(blk);
bp/library/bei.c:		if (def->offer != NULL
bp/library/bei.c:			if (def->offer(&blk, bundle) < 0)
bp/library/bei.c:			|| (processExtension = def->process[fnIdx]) == NULL)
bp/library/bei.c:						def->name);
bp/library/bei.c:	if (def && def->acquire)
bp/library/bei.c:		switch (def->acquire(blk, work))
bp/library/bei.c:			putErrmsg("Can't acquire extension block.", def->name);
bp/library/bei.c:		if (def->review)
bp/library/bei.c:			if (def->review(work) == 0)
bp/library/bei.c:			if (def == NULL || def->decrypt == NULL)
bp/library/bei.c:			switch (def->decrypt(blk, work))
bp/library/bei.c:						def->name);
bp/library/bei.c:			if (def == NULL || def->parse == NULL)
bp/library/bei.c:			switch (def->parse(blk, work))
bp/library/bei.c:						def->name);
bp/library/bei.c:			if (def == NULL || def->check == NULL)
bp/library/bei.c:			switch (def->check(blk, work))
bp/library/bei.c:						def->name);
bp/library/bei.c:	if (def && def->clear)
bp/library/bei.c:		def->clear(blk);
bp/library/bei.c:			if (def && def->record)
bp/library/bei.c:				def->record(&newBlk, oldBlk);
bp/library/libbpP.c:		if (def != NULL && def->offer != NULL)
bp/library/libbpP.c:			if (def->offer(&blk, &bundle) < 0)
bp/library/ext/bsp/extbsputil.c:		if (strcmp(def->name, blockType) == 0)
bp/library/ext/bsp/extbsputil.c:			return def->type;
bp/library/ext/bsp/extbsputil.c:		if (def->type == blockType)
bp/library/ext/bsp/extbsputil.c:			istrcat(s, def->name, buflen);
bp/ipnd/beacon.c:			newDef->dataLength = def->dataLength;
bp/ipnd/beacon.c:			newDef->number = def->number;
bp/ipnd/beacon.c:			newDef->data = MTAKE(def->dataLength);
bp/ipnd/beacon.c:			memcpy(newDef->data, def->data, def->dataLength);
bp/ipnd/beacon.c:					def->data);
bp/ipnd/beacon.c:			if (def->number == 126) defNbfHashes = def;
bp/ipnd/beacon.c:			if (def->number == 127) defNbfBits = def;
bp/ipnd/beacon.c:			defNew->data = MTAKE(def->dataLength);
bp/ipnd/beacon.c:			defNew->number = def->number;
bp/ipnd/beacon.c:			defNew->dataLength = def->dataLength;
bp/ipnd/beacon.c:			memcpy(defNew->data, def->data, def->dataLength);
bp/ipnd/beacon.c:			beaconLength += def->dataLength;
bp/ipnd/beacon.c:			memcpy(cursor, def->data, def->dataLength);
bp/ipnd/beacon.c:			cursor += def->dataLength;
bp/ipnd/node.c:				if (def->number == 64)
bp/ipnd/node.c:					if (def->data[2] == 4) /* IP is here */
bp/ipnd/node.c:								def->data[3],
bp/ipnd/node.c:								def->data[4],
bp/ipnd/node.c:								def->data[5],
bp/ipnd/node.c:								def->data[6],
bp/ipnd/node.c:							 	def->data[8])
bp/ipnd/node.c:								def->data[9]);
bp/ipnd/node.c:								def->data[6],
bp/ipnd/node.c:								def->data[7],
bp/ipnd/node.c:								def->data[8],
bp/ipnd/node.c:								def->data[9],
bp/ipnd/node.c:							 	def->data[3])
bp/ipnd/node.c:								def->data[4]);
bp/ipnd/ipnd.c:		if (def->number == 127)
bp/ipnd/ipnd.c:			cnt1 = decodeSdnv(&len1, def->data + 1);
bp/ipnd/ipnd.c:			cnt2 = decodeSdnv(&len2, def->data + 1 + cnt1 + 1);
bp/ipnd/ipnd.c:				memcpy(def->data + 1 + cnt1 + 1 + cnt2,
bp/ipnd/ipnd.c:				MRELEASE(def->data);
bp/ipnd/ipnd.c:				def->dataLength = 1 + sdnvTmp1.length + len1;
bp/ipnd/ipnd.c:				def->data = MTAKE(def->dataLength);
bp/ipnd/ipnd.c:				def->data[0] = 127; /* NBF-Bits */
bp/ipnd/ipnd.c:				def->data[1 + sdnvTmp1.length] = 9;
bp/ipnd/ipnd.c:				memcpy(def->data + 1, sdnvTmp1.text,
bp/ipnd/ipnd.c:				memcpy(def->data + 1 + sdnvTmp1.length + 1,
bp/ipnd/ipnd.c:				memcpy(def->data + 1 + sdnvTmp1.length + 1
bp/ipnd/ipnd.c:	def->number = id;
bp/ipnd/ipnd.c:	def->dataLength = len;
bp/ipnd/ipnd.c:	def->data = MTAKE(len);
bp/ipnd/ipnd.c:	memcpy((char *)def->data, (char *)data, len);
bp/ipnd/ipnd.c:		def->number = 127;
bp/ipnd/ipnd.c:		def->dataLength = 1 + sdnvTmp1.length + len1;
bp/ipnd/ipnd.c:		def->data = MTAKE(def->dataLength);
bp/ipnd/ipnd.c:		def->data[0] = 127; /* NBF-Bits */
bp/ipnd/ipnd.c:		def->data[1 + sdnvTmp1.length] = 9; // byte array
bp/ipnd/ipnd.c:		memcpy(def->data + 1, sdnvTmp1.text, sdnvTmp1.length);
bp/ipnd/ipnd.c:		memcpy(def->data + 1 + sdnvTmp1.length + 1,
bp/ipnd/ipnd.c:		memcpy(def->data + 1 + sdnvTmp1.length + 1
nm/agent/adm_amp_agent_impl.c:	if(VDB_FINDKEY_RPTT(def->id) == NULL)
nm/agent/adm_amp_agent_impl.c:		int rh_code = VDB_ADD_RPTT(def->id, def);
nm/agent/adm_amp_agent_impl.c:			db_forget(&(def->desc), gDB.rpttpls);
nm/agent/adm_amp_agent_impl.c:				((tbl = def->build(cur_id)) == NULL) ||
nm/agent/adm_amp_agent_impl.c:			db_forget(&(def->desc), gDB.macdefs);
nm/mgr/adm_bp_agent_mgr.c:	meta_add_rpttpl(def->id, ADM_ENUM_DTN_BP_AGENT, "full_report", "This is all known meta-data, EDD, and VAR values known by the agent.");
nm/mgr/adm_bp_agent_mgr.c:	meta = meta_add_rpttpl(def->id, ADM_ENUM_DTN_BP_AGENT, "endpoint_report", "This is all known endpoint information");
nm/mgr/adm_ion_bp_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_BPADMIN, "endpoints", "Local endpoints, regardless of scheme name.");
nm/mgr/adm_ion_bp_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_BPADMIN, "inducts", "Inducts established locally for the indicated CL protocol.");
nm/mgr/adm_ion_bp_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_BPADMIN, "outducts", "If protocolName is specified, this table lists all outducts established locally for the indicated CL protocol. Otherwise, it lists all locally established outducts, regardless of their protocol.");
nm/mgr/adm_ion_bp_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_BPADMIN, "protocols", "Convergence layer protocols that can currently be utilized at the local node.");
nm/mgr/adm_ion_bp_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_BPADMIN, "schemes", "Declared endpoint naming schemes.");
nm/mgr/adm_ion_bp_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_BPADMIN, "egress_plans", "Egress plans.");
nm/mgr/adm_ltp_agent_mgr.c:	meta = meta_add_rpttpl(def->id, ADM_ENUM_DTN_LTP_AGENT, "endpointReport", "This is all known endpoint information");
nm/mgr/adm_ltp_agent_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_LTP_AGENT, "engines", "This table lists all known remote engine ids.");
nm/mgr/adm_ion_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_IONADMIN, "contacts", "This table shows all scheduled periods of data transmission.");
nm/mgr/adm_ion_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_IONADMIN, "ranges", "This table shows all predicted periods of constant distance between nodes.");
nm/mgr/adm_sbsp_mgr.c:	meta_add_rpttpl(def->id, ADM_ENUM_DTN_SBSP, "full_report", "all known meta-data, externally defined data, and variables");
nm/mgr/adm_sbsp_mgr.c:	meta = meta_add_rpttpl(def->id, ADM_ENUM_DTN_SBSP, "source_report", "security info by source");
nm/mgr/adm_sbsp_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_SBSP, "bib_rules", "BIB Rules.");
nm/mgr/adm_sbsp_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_SBSP, "bcb_rules", "BCB Rules.");
nm/mgr/adm_ionsec_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_IONSECADMIN, "ltp_rx_rules", "This table lists all LTP segment authentication rulesin the security policy database.");
nm/mgr/adm_ionsec_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_IONSECADMIN, "ltp_tx_rules", "This table lists all LTP segment signing rules in the security policy database.");
nm/mgr/adm_ion_ltp_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_LTPADMIN, "spans", "This table lists all spans of potential LTP data interchange that exists between the local LTP engine and the indicated (neighboring) LTP engine.");
nm/mgr/nm_mgr_ui.c:			VDB_ADD_RPTT(def->id, def);
nm/mgr/nm_mgr_ui.c:				db_forget(&(def->desc), gDB.rpttpls);
nm/mgr/nm_mgr_ui.c:				db_forget(&(def->desc), gDB.macdefs);
nm/mgr/nm_mgr_ui.c:				db_forget(&(def->desc), gDB.rules);
nm/mgr/adm_ion_ipn_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_IPNADMIN, "exits", "This table lists all of the exits that are defined in the IPN database for the local node.");
nm/mgr/adm_ion_ipn_admin_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_DTN_ION_IPNADMIN, "plans", "This table lists all of the egress plans that are established in the IPN database for the local node.");
nm/mgr/adm_amp_agent_mgr.c:	meta = meta_add_macro(def->ari, ADM_ENUM_AMP_AGENT, "user_desc", "This macro lists all of the user defined data.");
nm/mgr/adm_amp_agent_mgr.c:	meta_add_rpttpl(def->id, ADM_ENUM_AMP_AGENT, "full_report", "This is all known meta-data, EDD, and VAR values known by the agent.");
nm/mgr/adm_amp_agent_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_AMP_AGENT, "adms", "This table lists all the adms that are supported by the agent.");
nm/mgr/adm_amp_agent_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_AMP_AGENT, "variables", "This table lists the ARI for every variable that is known to the agent.");
nm/mgr/adm_amp_agent_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_AMP_AGENT, "rptts", "This table lists the ARI for every report template that is known to the agent.");
nm/mgr/adm_amp_agent_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_AMP_AGENT, "macros", "This table lists the ARI for every macro that is known to the agent.");
nm/mgr/adm_amp_agent_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_AMP_AGENT, "rules", "This table lists the ARI for every rule that is known to the agent.");
nm/mgr/adm_amp_agent_mgr.c:	meta_add_tblt(def->id, ADM_ENUM_AMP_AGENT, "tblts", "This table lists the ARI for every table template that is known to the agent.");
nm/shared/utils/db.c:	result = db_persist(blob, &(def->desc), gDB.macdefs);
nm/shared/primitives/rules.c:	result = expr_serialize_wrapper(&(def->expr));
nm/shared/primitives/rules.c:	QCBOREncode_AddUInt64(array_enc, def->max_eval);
nm/shared/primitives/rules.c:	QCBOREncode_AddUInt64(array_enc, def->max_fire);
nm/shared/primitives/rules.c:	QCBOREncode_AddUInt64(array_enc, def->period);
nm/shared/primitives/rules.c:	QCBOREncode_AddUInt64(array_enc, def->max_fire);
nm/shared/primitives/edd_var.c:	ari_release(def->id, 1);
nm/shared/primitives/edd_var.c:	expr_release(def->expr, 1);
nm/shared/primitives/edd_var.c:	result = ari_serialize_wrapper(def->id);
nm/shared/primitives/edd_var.c:	err = cut_enc_byte(encoder, def->type);
nm/shared/primitives/edd_var.c:	result = expr_serialize_wrapper(def->expr);
nm/shared/primitives/ctrl.c:	ari_release(def->ari, 1);
nm/shared/adm/adm.c:	rh_code = VDB_ADD_CONST(def->def.id, def);
nm/shared/adm/adm.c:	rh_code = VDB_ADD_CTRLDEF(def->ari, def);
nm/shared/adm/adm.c:	rh_code = VDB_ADD_EDD(def->def.id, def);
nm/shared/adm/adm.c:	rh_code = VDB_ADD_MACDEF(def->ari, def);
nm/shared/adm/adm.c:	rh_code = VDB_ADD_OP(def->id, def);
nm/shared/adm/adm.c:	rh_code = VDB_ADD_RPTT(def->id, def);
nm/shared/adm/adm.c:	rh_code = VDB_ADD_TBLT(def->id, def);
